from discord.ext import commands
from discord import *
import pytz
from datetime import datetime, timedelta
import re

class SleepCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    def standardize_time_format(self, time_str):
        # Remove spaces and convert to lowercase
        time_str = time_str.replace(" ", "").lower()
        
        # Replace 'h' with ':'
        time_str = re.sub(r'(\d+)h(\d+)', r'\1:\2', time_str)
        
        # Ensure there is a space before 'am' or 'pm'
        time_str = re.sub(r'(\d+)(am|pm)', r'\1 \2', time_str)
        
        # Default to 'am' if neither 'am' nor 'pm' is present
        if 'am' not in time_str and 'pm' not in time_str:
            time_str += ' am'
        
        return time_str

    def calculate_times(self, current_time, time_to_wakeup=None):
        # Th·ªùi gian c·ªßa m·ªôt chu k·ª≥ gi·∫•c ng·ªß l√† 90 ph√∫t
        sleep_cycle_duration = timedelta(minutes=90)
        # Th·ªùi gian ƒë·ªÉ ƒëi v√†o gi·∫•c ng·ªß l√† 14 ph√∫t
        time_to_fall_asleep = timedelta(minutes=14)

        if time_to_wakeup:
            # N·∫øu cung c·∫•p th·ªùi gian mu·ªën th·ª©c d·∫≠y, t√≠nh to√°n th·ªùi gian ƒëi ng·ªß
            wakeup_time = datetime.strptime(self.standardize_time_format(time_to_wakeup), '%I:%M %p')
            wakeup_time = current_time.replace(hour=wakeup_time.hour, minute=wakeup_time.minute, second=0, microsecond=0)
            sleep_times = []
            for i in range(6, 2, -1):
                sleep_time = wakeup_time - (i * sleep_cycle_duration) - time_to_fall_asleep
                sleep_duration = i * sleep_cycle_duration
                sleep_times.append({
                    'time': sleep_time.strftime('%I:%M %p'),
                    'cycles': i,
                    'hours': sleep_duration.total_seconds() / 3600
                })
            return sleep_times, "sleep"
        else:
            # N·∫øu kh√¥ng cung c·∫•p th·ªùi gian mu·ªën th·ª©c d·∫≠y, t√≠nh to√°n th·ªùi gian th·ª©c d·∫≠y
            adjusted_time = current_time + time_to_fall_asleep
            wakeup_times = []
            for i in range(1, 7):
                wakeup_time = adjusted_time + i * sleep_cycle_duration
                sleep_duration = i * sleep_cycle_duration
                wakeup_times.append({
                    'time': wakeup_time.strftime('%I:%M %p'),
                    'cycles': i,
                    'hours': sleep_duration.total_seconds() / 3600
                })
            return wakeup_times, "wakeup"
    #sleep
    @commands.hybrid_command(name = "sleep", aliases = ['ngu', 'slip'])
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    async def sleep(self, ctx, gi·ªù_th·ª©c_d·∫≠y: str = None):
        """
        T√≠nh to√°n th·ªùi gian ƒëi ng·ªß

        Parameters:
        gi·ªù_th·ª©c_d·∫≠y: None
            Th·ªùi gian m√† b·∫°n mu·ªën th·ª©c d·∫≠y, ƒë·ªãnh d·∫°ng: 12:00 AM
        """
        # L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù UTC+7
        utc_plus_7 = pytz.timezone('Asia/Bangkok')
        current_time_utc_plus_7 = datetime.now(utc_plus_7)
        
        # T√≠nh to√°n c√°c th·ªùi ƒëi·ªÉm th·ª©c d·∫≠y ho·∫∑c ƒëi ng·ªß
        try:
            times, mode = self.calculate_times(current_time_utc_plus_7, gi·ªù_th·ª©c_d·∫≠y)
        except ValueError:
            await ctx.send("ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá! Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng 12 gi·ªù v·ªõi AM/PM (v√≠ d·ª•: 07:30 AM ho·∫∑c 07:30 PM).")
            return

        if mode == "wakeup":
            result_message = (
                f"B√¢y gi·ªù l√† **{current_time_utc_plus_7.strftime('%I:%M %p')}**. N·∫øu b·∫°n ƒëi ng·ªß ngay b√¢y gi·ªù, b·∫°n n√™n c·ªë g·∫Øng th·ª©c d·∫≠y v√†o m·ªôt trong nh·ªØng th·ªùi ƒëi·ªÉm sau:\n\n"
            )
            for entry in times:
                result_message += f"‚è∞ **{entry['time']}** cho {entry['cycles']} chu k·ª≥ - ng·ªß {entry['hours']:.1f} ti·∫øng.\n"
            
            result_message += "\nXin l∆∞u √Ω r·∫±ng b·∫°n n√™n ƒëi ng·ªß v√†o nh·ªØng th·ªùi ƒëi·ªÉm n√†y. Con ng∆∞·ªùi trung b√¨nh m·∫•t ~14 ph√∫t ƒë·ªÉ ƒëi v√†o gi·∫•c ng·ªß, v√¨ v·∫≠y h√£y l√™n k·∫ø ho·∫°ch cho ph√π h·ª£p!\n\nCh√∫c ng·ªß ngon! üò¥"
        else:
            result_message = (
                f"N·∫øu b·∫°n mu·ªën t·ªânh gi·∫•c v√†o **{gi·ªù_th·ª©c_d·∫≠y}**, b·∫°n n√™n c·ªë g·∫Øng ƒëi v√†o gi·∫•c ng·ªß v√†o m·ªôt trong nh·ªØng th·ªùi ƒëi·ªÉm sau:\n\n"
            )
            for entry in times:
                result_message += f"‚è∞ **{entry['time']}** cho {entry['cycles']} chu k·ª≥ - ng·ªß {entry['hours']:.1f} ti·∫øng.\n"
            
            result_message += "\nXin l∆∞u √Ω r·∫±ng b·∫°n n√™n ƒëi ng·ªß v√†o nh·ªØng th·ªùi ƒëi·ªÉm n√†y. Con ng∆∞·ªùi trung b√¨nh m·∫•t ~14 ph√∫t ƒë·ªÉ ƒëi v√†o gi·∫•c ng·ªß, v√¨ v·∫≠y h√£y l√™n k·∫ø ho·∫°ch cho ph√π h·ª£p!\n\nCh√∫c ng·ªß ngon! üò¥"

        # G·ª≠i k·∫øt qu·∫£ v·ªÅ k√™nh
        await ctx.send(result_message)
        
async def setup(bot):
    await bot.add_cog(SleepCommand(bot))